#!/usr/bin/env python3
import requests
import json
import os
from rich.console import Console
from rich.panel import Panel
from rich.json import JSON
from rich.text import Text
from InquirerPy import inquirer

CONFIG_FILE = "helmsman_config.json"
console = Console()

# ----------------- Banner -----------------
def show_welcome_banner():
    helmsman_ascii = r"""
    ____                       __          _____ __         ____
   ╱ __ ╲___  ____ ___  ____  ╱ ╱____     ╱ ___╱╱ ╱_  ___  ╱ ╱ ╱
  ╱ ╱_╱ ╱ _ ╲╱ __ `__ ╲╱ __ ╲╱ __╱ _ ╲    ╲__ ╲╱ __ ╲╱ _ ╲╱ ╱ ╱ 
 ╱ _, _╱  __╱ ╱ ╱ ╱ ╱ ╱ ╱_╱ ╱ ╱_╱  __╱   ___╱ ╱ ╱ ╱ ╱  __╱ ╱ ╱  
╱_╱ │_│╲___╱_╱ ╱_╱ ╱_╱╲____╱╲__╱╲___╱   ╱____╱_╱ ╱_╱╲___╱_╱_╱
"""
    infinity_sign = Text("∞", style="bold blue", justify="center")
    console.print(helmsman_ascii, style="bold cyan")
    console.print(infinity_sign)

# ----------------- Config -----------------
def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r") as f:
            return json.load(f)
    else:
        api_host = os.environ.get("API_HOST", "api")
        api_port = os.environ.get("API_PORT", "8000")
        default_config = {"api_url": f"http://{api_host}:{api_port}"}
        with open(CONFIG_FILE, "w") as f:
            json.dump(default_config, f, indent=4)
        return default_config

config = load_config()
API_URL = config.get("api_url", "http://api:8000")

# ----------------- Session & Auth -----------------
session = requests.Session()
auth = None  # (username, password)

# ----------------- Login -----------------
def login():
    global auth
    username = inquirer.text(message="Username:").execute()
    password = inquirer.secret(message="Password:").execute()

    resp = session.get(f"{API_URL}/api/servers", auth=(username, password))
    if resp.status_code == 200:
        console.print("[bold green]Login successful![/]")
        show_welcome_banner()
        auth = (username, password)
    else:
        console.print(f"[bold red]Login failed: {resp.status_code}[/] - {resp.text}")
        login()

# ----------------- Helpers -----------------
def safe_print_json(resp):
    try:
        console.print(JSON(resp.text))
    except Exception:
        console.print(Panel(resp.text, title="Response", style="bold red"))

def choose_option(title, options):
    """Повертає ключ, а не кортеж"""
    choice = inquirer.select(
        message=title,
        choices=[{"name": desc[0], "value": key} for key, desc in options.items()],
    ).execute()
    return choice

# ----------------- Servers -----------------
def list_servers():
    resp = session.get(f"{API_URL}/api/servers", auth=auth)
    safe_print_json(resp)

def get_server():
    server_id = int(inquirer.number(message="Server ID:").execute())
    resp = session.get(f"{API_URL}/api/servers/{server_id}", auth=auth)
    safe_print_json(resp)

def create_server():
    name = inquirer.text(message="Server name:").execute()
    remote_url = inquirer.text(message="Remote URL:").execute()
    created_by = inquirer.text(message="Created by:").execute()
    one_c_name = inquirer.text(message="1C name (optional):").execute()

    data = {
        "name": name,
        "remote-url": remote_url,
        "created-by": created_by,
        "1c-name": one_c_name,
    }

    resp = session.post(f"{API_URL}/api/servers", json=data, auth=auth)
    if resp.status_code != 201:
        console.print("[bold red]Error creating server:[/]")
        safe_print_json(resp)
        return

    resp_last = session.get(f"{API_URL}/api/servers/last-created", auth=auth)
    if resp_last.status_code == 200:
        data = resp_last.json()
        console.print(Panel(f"Server created successfully!\nID: {data['id']}\nName: {data['name']}\nAgent password: {data['agent_password']}", title="Success", style="bold green"))
    else:
        console.print("Server created but could not fetch details.")
        safe_print_json(resp_last)

def delete_server_by_id():
    server_id = int(inquirer.number(message="Server ID to delete:").execute())
    resp = session.delete(f"{API_URL}/api/servers/{server_id}", auth=auth)
    safe_print_json(resp)
    
# ----------------- Commands -----------------
def send_command():
    server_id = int(inquirer.number(message="Server ID:").execute())
    command = inquirer.text(message="Command (leave blank if using script):").execute()
    script = inquirer.text(message="Script filename (optional):").execute()

    data = {
        "server_id": server_id,
        "command": command if command else None,
        "script": script if script else None
    }

    resp = session.post(f"{API_URL}/api/send-command", json=data, auth=auth)
    if resp.status_code == 201:
        data = resp.json()
        console.print(f"[bold green]Command sent successfully! Command ID: {data['command_id']}[/]")
    else:
        safe_print_json(resp)

def get_command():
    server_id = int(inquirer.number(message="Server ID:").execute())
    resp = session.get(f"{API_URL}/api/get-command/{server_id}", auth=auth)
    safe_print_json(resp)

# ----------------- Results -----------------
def send_result():
    server_id = int(inquirer.number(message="Server ID:").execute())
    command_id = int(inquirer.number(message="Command ID:").execute())
    password = inquirer.secret(message="Agent password:").execute()
    result = inquirer.text(message="Result:").execute()

    data = {
        "server_id": server_id,
        "command_id": command_id,
        "password": password,
        "result": result
    }

    resp = session.post(f"{API_URL}/api/send-result", json=data, auth=auth)
    safe_print_json(resp)

def get_result():
    command_id = int(inquirer.number(message="Command ID:").execute())
    resp = session.get(f"{API_URL}/api/get-result/{command_id}", auth=auth)
    safe_print_json(resp)

# ----------------- Users -----------------
def list_users():
    resp = session.get(f"{API_URL}/api/users", auth=auth)
    safe_print_json(resp)

def create_user():
    username = inquirer.text(message="Username:").execute()
    password = inquirer.secret(message="Password:").execute()
    role = inquirer.select(message="Role:", choices=["admin","user"]).execute()
    visible_name = inquirer.text(message="Visible name (UA):").execute()

    data = {
        "username": username,
        "password": password,
        "role": role,
        "visible_name": visible_name
    }

    resp = session.post(f"{API_URL}/api/users", json=data, auth=auth)
    safe_print_json(resp)

def update_user_password():
    username = inquirer.text(message="Username:").execute()
    new_password = inquirer.secret(message="New password:").execute()

    data = {"password": new_password}
    resp = session.put(f"{API_URL}/api/users/{username}/password", json=data, auth=auth)
    safe_print_json(resp)

def delete_user():
    username = inquirer.text(message="Username:").execute()
    resp = session.delete(f"{API_URL}/api/users/{username}", auth=auth)
    safe_print_json(resp)

# ----------------- User Servers -----------------
def list_user_servers():
    resp = session.get(f"{API_URL}/api/user-servers", auth=auth)
    safe_print_json(resp)

def assign_server_to_user():
    server_id = int(inquirer.number(message="Server ID to assign:").execute())
    resp = session.post(f"{API_URL}/api/assign-server", json={"server_id": server_id}, auth=auth)
    safe_print_json(resp)

def remove_server_from_user():
    server_id = int(inquirer.number(message="Server ID to remove:").execute())
    resp = session.delete(f"{API_URL}/api/unassign-server/{server_id}", auth=auth)
    safe_print_json(resp)

# ----------------- Menu -----------------
CATEGORY_ACTIONS = {
    "1": ("Users", {
        "1": ("List users", list_users),
        "2": ("Create user", create_user),
        "3": ("Update user password", update_user_password),
        "4": ("Delete user", delete_user),
        "0": ("Back", None)
    }),
    "2": ("Servers", {
        "1": ("List servers", list_servers),
        "2": ("Get server by ID", get_server),
        "3": ("Create server", create_server),
        "4": ("Delete server by ID", delete_server_by_id),
        "0": ("Back", None)
    }),
    "3": ("Commands", {
        "1": ("Send command", send_command),
        "2": ("Get command for agent", get_command),
        "0": ("Back", None)
    }),
    "4": ("Results", {
        "1": ("Send result", send_result),
        "2": ("Get result", get_result),
        "0": ("Back", None)
    }),
    "5": ("My Servers", {
        "1": ("List my servers", list_user_servers),
        "2": ("Assign server to me", assign_server_to_user),
        "3": ("Remove server from me", remove_server_from_user),
        "0": ("Back", None)
    }),
    "0": ("Exit", None)
}

def category_menu(category_dict):
    while True:
        choice = choose_option("Choose action", category_dict)
        if choice == "0":
            break
        _, func = category_dict[choice]
        func()

def main_menu():
    while True:
        choice = choose_option("=== Main Menu ===", CATEGORY_ACTIONS)
        if choice == "0":
            break
        _, actions = CATEGORY_ACTIONS[choice]
        category_menu(actions)

if __name__ == "__main__":
    login()
    main_menu()
