name: Deploy full Docker Compose stack to EC2

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      EC2_IP: ${{ secrets.EC2_IP }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_TAG: latest

      API_IMAGE: api
      FRONTEND_IMAGE: frontend
      NGINX_IMAGE: nginx
      CONSOLE_IMAGE: console

      SQLITE_VOLUME: sqlite_data
      FRONTEND_VOLUME: frontend_build
      NETWORK_NAME: app-network

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Debug SSH connection
        run: |
          ssh -vvv -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$EC2_IP "
            echo 'Connected to:' \$(hostname)
            echo 'User:' \$(whoami)
            id
            pwd
            uname -a
            cat /etc/os-release || true
          "

      - name: Install Docker & Docker Compose on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$EC2_IP "
            set -xe

            sudo apt update && sudo apt upgrade -y

            sudo apt install -y curl git apt-transport-https ca-certificates gnupg lsb-release

            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo \
              \"deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
              \$(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            sudo apt update
            sudo apt install -y docker-ce docker-ce-cli containerd.io

            sudo usermod -aG docker ubuntu
            sudo apt install -y docker-compose-plugin

            docker --version
            docker compose version
          "
      - name: Create volumes and network
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$EC2_IP "
            docker volume create $SQLITE_VOLUME || true
            docker volume create $FRONTEND_VOLUME || true
            docker network create $NETWORK_NAME || true
          "

      - name: Pull Docker images from Docker Hub
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$EC2_IP "
            echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker pull $DOCKERHUB_USERNAME/$API_IMAGE:$IMAGE_TAG
            docker pull $DOCKERHUB_USERNAME/$FRONTEND_IMAGE:$IMAGE_TAG
            docker pull $DOCKERHUB_USERNAME/$NGINX_IMAGE:$IMAGE_TAG
            docker pull $DOCKERHUB_USERNAME/$CONSOLE_IMAGE:$IMAGE_TAG
          "

      - name: Stop old containers
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$EC2_IP "
            docker rm -f api frontend nginx console || true
          "

      - name: Run containers (full stack)
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$EC2_IP "
            docker run -d --name api --network $NETWORK_NAME -v $SQLITE_VOLUME:/app/data $DOCKERHUB_USERNAME/$API_IMAGE:$IMAGE_TAG
            docker run -d --name frontend --network $NETWORK_NAME -v $FRONTEND_VOLUME:/app/dist $DOCKERHUB_USERNAME/$FRONTEND_IMAGE:$IMAGE_TAG sh -c 'npm run build'
            docker run -d --name nginx --network $NETWORK_NAME -v $FRONTEND_VOLUME:/usr/share/nginx/html -p 80:80 --link frontend --link api $DOCKERHUB_USERNAME/$NGINX_IMAGE:$IMAGE_TAG
            docker run -d --name console --network $NETWORK_NAME -v ./console:/app -it $DOCKERHUB_USERNAME/$CONSOLE_IMAGE:$IMAGE_TAG
          "

      - name: Configure firewall (Ubuntu)
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$EC2_IP "
            sudo ufw allow 22/tcp
            sudo ufw allow 80/tcp
            sudo ufw allow 443/tcp
            sudo ufw --force enable || true
          "
