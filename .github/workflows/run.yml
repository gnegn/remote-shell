#Pull and run docker image on ec2.yml
name: Deploy full Docker Compose stack to EC2

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      EC2_IP: ${{ secrets.EC2_IP }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_TAG: latest

      API_IMAGE: api
      FRONTEND_IMAGE: frontend
      NGINX_IMAGE: nginx
      CONSOLE_IMAGE: console

      SQLITE_VOLUME: sqlite_data
      FRONTEND_VOLUME: frontend_build
      NETWORK_NAME: app-network

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Debug SSH connection
        run: |
          ssh -vvv -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$EC2_IP "
            echo 'Connected to:' \$(hostname)
            echo 'User:' \$(whoami)
            id
            pwd
            uname -a
            cat /etc/os-release || true
          "

      - name: Install Docker & Docker Compose on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$EC2_IP "
            sudo apt-get update -y
            sudo apt install curl software-properties-common ca-certificates apt-transport-https -y
            wget -O- https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor | sudo tee /etc/apt/keyrings/docker.gpg > /dev/null 
            echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable"| sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt update -y
            apt-cache policy docker-ce
            sudo apt install docker-ce -y
            sudo systemctl status docker
            sudo apt-get install docker-compose -y
          "

      - name: Pull Docker images from Docker Hub
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$EC2_IP "
            sudo usermod -aG docker ubuntu
            echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker pull $DOCKERHUB_USERNAME/$API_IMAGE:$IMAGE_TAG
            docker pull $DOCKERHUB_USERNAME/$FRONTEND_IMAGE:$IMAGE_TAG
            docker pull $DOCKERHUB_USERNAME/$NGINX_IMAGE:$IMAGE_TAG
            docker pull $DOCKERHUB_USERNAME/$CONSOLE_IMAGE:$IMAGE_TAG
          "


      - name: Stop old containers
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$EC2_IP "
            docker rm -f api frontend nginx || true
          "

      - name: Run containers
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$EC2_IP "

            docker network create ${NETWORK_NAME} || true


            docker volume create ${SQLITE_VOLUME} || true

            docker run -d \
              --name api \
              --network ${NETWORK_NAME} \
              --mount source=${SQLITE_VOLUME},target=/app/data \
              $DOCKERHUB_USERNAME/${API_IMAGE}:${IMAGE_TAG}

            docker run -d \
              --name frontend \
              --network ${NETWORK_NAME} \
              -p 80:80 \
              $DOCKERHUB_USERNAME/${FRONTEND_IMAGE}:${IMAGE_TAG}
          "

      - name: Configure firewall (Ubuntu)
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$EC2_IP "
            sudo ufw allow 22/tcp
            sudo ufw allow 80/tcp
            sudo ufw allow 443/tcp
            sudo ufw --force enable || true
          "
