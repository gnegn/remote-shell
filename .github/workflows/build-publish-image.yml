name: Build and Deploy Double Helix App

on:
  workflow_dispatch:

env:
  API_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/double-helix-app-api-dev-${{ github.sha }}
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/double-helix-app-frontend-dev-${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ env.API_IMAGE }}
          no-cache: true

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}
          no-cache: true

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy and run Docker containers on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} "
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo usermod -a -G docker ec2-user

            if ! sudo docker network ls | grep app-network; then
              sudo docker network create app-network
            fi

            for port in 8000 5173; do
              cid=\$(sudo docker ps -aq --filter \"publish=\$port\")
              if [ -n \"\$cid\" ]; then
                sudo docker stop \$cid || true
                sudo docker rm \$cid || true
              fi
            done

            sudo docker stop api || true
            sudo docker rm api || true
            sudo docker rmi ${{ env.API_IMAGE }} || true

            sudo docker stop frontend || true
            sudo docker rm frontend || true
            sudo docker rmi ${{ env.FRONTEND_IMAGE }} || true

            sudo docker pull ${{ env.API_IMAGE }}
            sudo docker pull ${{ env.FRONTEND_IMAGE }}

            sudo docker run -d --name api --network app-network -p 8000:8000 \
              ${{ env.API_IMAGE }}

            sudo docker run -d --name frontend --network app-network -p 5173:5173 \
              -e VITE_BACKEND_URL=http://api:8000 \
              ${{ env.FRONTEND_IMAGE }}
          "
