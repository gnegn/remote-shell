import requests
import json
import os

CONFIG_FILE = "helmsman_config.json"

# ----------------- Config -----------------
def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r") as f:
            return json.load(f)
    else:
        # fallback на http://api:8000
        api_host = os.environ.get("API_HOST", "api")
        api_port = os.environ.get("API_PORT", "8000")
        default_config = {"api_url": f"http://{api_host}:{api_port}"}
        with open(CONFIG_FILE, "w") as f:
            json.dump(default_config, f, indent=4)
        return default_config

config = load_config()
API_URL = config.get("api_url", "http://api:8000")

# ----------------- Session & Auth -----------------
session = requests.Session()
auth = None  # (username, password)

def login():
    global auth
    username = input("Username: ").strip()
    password = input("Password: ").strip()
    
    resp = session.get(f"{API_URL}/api/servers", auth=(username, password))
    if resp.status_code == 200:
        print("Login successful!")
        auth = (username, password)
    else:
        print(f"Login failed: {resp.status_code} - {resp.text}")
        login()

# ----------------- Helpers -----------------
def safe_print_json(resp):
    try:
        print(json.dumps(resp.json(), indent=4))
    except Exception:
        print("Response is not valid JSON:")
        print(resp.text)

# ----------------- Servers -----------------
def list_servers():
    resp = session.get(f"{API_URL}/api/servers", auth=auth)
    safe_print_json(resp)

def get_server():
    server_id = int(input("Server ID: "))
    resp = session.get(f"{API_URL}/api/servers/{server_id}", auth=auth)
    safe_print_json(resp)

def create_server():
    name = input("Server name: ")
    remote_url = input("Remote URL: ")
    created_by = input("Created by: ")
    one_c_name = input("1C name (optional): ")

    data = {
        "name": name,
        "remote-url": remote_url,
        "created-by": created_by,
        "1c-name": one_c_name,
    }

    resp = session.post(f"{API_URL}/api/servers", json=data, auth=auth)
    if resp.status_code != 201:
        print("Error creating server:")
        safe_print_json(resp)
        return

    resp_last = session.get(f"{API_URL}/api/servers/last-created", auth=auth)
    if resp_last.status_code == 200:
        data = resp_last.json()
        print("\nServer created successfully!")
        print(f"   ID: {data['id']}")
        print(f"   Name: {data['name']}")
        print(f"   Agent password: {data['agent_password']}")
    else:
        print("Server created but could not fetch details.")
        safe_print_json(resp_last)

# ----------------- Commands -----------------
def send_command():
    server_id = int(input("Server ID: "))
    command = input("Command (leave blank if using script): ")
    script = input("Script filename (optional): ")

    data = {
        "server_id": server_id,
        "command": command if command else None,
        "script": script if script else None
    }

    resp = session.post(f"{API_URL}/api/send-command", json=data, auth=auth)
    if resp.status_code == 201:
        data = resp.json()
        print(f"Command sent successfully! Command ID: {data['command_id']}")
    else:
        safe_print_json(resp)

def get_command():
    server_id = int(input("Server ID: "))
    resp = session.get(f"{API_URL}/api/get-command/{server_id}", auth=auth)
    safe_print_json(resp)

# ----------------- Results -----------------
def send_result():
    server_id = int(input("Server ID: "))
    command_id = int(input("Command ID: "))
    password = input("Agent password: ")
    result = input("Result: ")

    data = {
        "server_id": server_id,
        "command_id": command_id,
        "password": password,
        "result": result
    }

    resp = session.post(f"{API_URL}/api/send-result", json=data, auth=auth)
    safe_print_json(resp)

def get_result():
    command_id = int(input("Command ID: "))
    resp = session.get(f"{API_URL}/api/get-result/{command_id}", auth=auth)
    safe_print_json(resp)
    
# ----------------- Users -----------------
def list_users():
    resp = session.get(f"{API_URL}/api/users", auth=auth)
    safe_print_json(resp)

def create_user():
    username = input("Username: ")
    password = input("Password: ")
    role = input("Role (admin/user): ")

    data = {
        "username": username,
        "password": password,
        "role": role
    }

    resp = session.post(f"{API_URL}/api/users", json=data, auth=auth)
    safe_print_json(resp)

def update_user_password():
    username = input("Username: ")
    new_password = input("New password: ")

    data = {"password": new_password}
    resp = session.put(f"{API_URL}/api/users/{username}/password", json=data, auth=auth)
    safe_print_json(resp)

def delete_user():
    username = input("Username: ")
    resp = session.delete(f"{API_URL}/api/users/{username}", auth=auth)
    safe_print_json(resp)

# ----------------- User Servers -----------------
def list_user_servers():
    resp = session.get(f"{API_URL}/api/user-servers", auth=auth)
    safe_print_json(resp)

def assign_server_to_user():
    server_id = int(input("Server ID to assign: "))
    resp = session.post(f"{API_URL}/api/assign-server", json={"server_id": server_id}, auth=auth)
    safe_print_json(resp)

def remove_server_from_user():
    server_id = int(input("Server ID to remove: "))
    resp = session.delete(f"{API_URL}/api/unassign-server/{server_id}", auth=auth)
    safe_print_json(resp)

# ----------------- Menu -----------------
CATEGORY_ACTIONS = {
    "1": ("Users", {
        "1": ("List users", list_users),
        "2": ("Create user", create_user),
        "3": ("Update user password", update_user_password),
        "4": ("Delete user", delete_user),
        "0": ("Back", None)
    }),
    "2": ("Servers", {
        "1": ("List servers", list_servers),
        "2": ("Get server by ID", get_server),
        "3": ("Create server", create_server),
        "0": ("Back", None)
    }),
    "3": ("Commands", {
        "1": ("Send command", send_command),
        "2": ("Get command for agent", get_command),
        "0": ("Back", None)
    }),
    "4": ("Results", {
        "1": ("Send result", send_result),
        "2": ("Get result", get_result),
        "0": ("Back", None)
    }),
    "5": ("My Servers", {
        "1": ("List my servers", list_user_servers),
        "2": ("Assign server to me", assign_server_to_user),
        "3": ("Remove server from me", remove_server_from_user),
        "0": ("Back", None)
    }),
    "0": ("Exit", None)
}

def category_menu(category_dict):
    while True:
        print("\n--- Choose action ---")
        for key, (desc, _) in category_dict.items():
            print(f"{key}. {desc}")
        choice = input("Option: ").strip()
        action = category_dict.get(choice)
        if not action:
            print("Invalid choice!")
            continue
        if choice == "0":
            break
        _, func = action
        func()

def main_menu():
    while True:
        print("\n=== Main Menu ===")
        for key, (desc, _) in CATEGORY_ACTIONS.items():
            print(f"{key}. {desc}")
        choice = input("Choose category: ").strip()
        category = CATEGORY_ACTIONS.get(choice)
        if not category:
            print("Invalid choice!")
            continue
        if choice == "0":
            break
        _, actions = category
        category_menu(actions)

if __name__ == "__main__":
    login()
    main_menu()
